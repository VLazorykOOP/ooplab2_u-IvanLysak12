1.#include <iostream>
//#include <stdexcept>

using namespace std;

template <typename T>
class Matrix {
private:
    int rows_;
    int cols_;
    T** data_;

public:
    Matrix(int rows, int cols)
        : rows_(rows), cols_(cols)
    {
        data_ = new T*[rows_];
        for (int i = 0; i < rows_; ++i) {
            data_[i] = new T[cols_];
            for (int j = 0; j < cols_; ++j) {
                data_[i][j] = T();
            }
        }
    }

    Matrix(const Matrix& other)
        : rows_(other.rows_), cols_(other.cols_)
    {
        data_ = new T*[rows_];
        for (int i = 0; i < rows_; ++i) {
            data_[i] = new T[cols_];
            for (int j = 0; j < cols_; ++j) {
                data_[i][j] = other.data_[i][j];
            }
        }
    }

    ~Matrix()
    {
        for (int i = 0; i < rows_; ++i) {
            delete[] data_[i];
        }
        delete[] data_;
    }

    Matrix& operator=(const Matrix& other)
    {
        if (this != &other) {
            Matrix temp(other);
            swap(rows_, temp.rows_);
            swap(cols_, temp.cols_);
            swap(data_, temp.data_);
        }
        return *this;
    }

    const T* operator[](int row) const
    {
        if (row < 0 || row >= rows_) {
            throw out_of_range("Matrix index out of range");
        }
        return data_[row];
    }

    T* operator[](int row)
    {
        if (row < 0 || row >= rows_) {
            throw out_of_range("Matrix index out of range");
        }
        return data_[row];
    }

    Matrix operator+(const Matrix& other) const
    {
        if (rows_ != other.rows_ || cols_ != other.cols_) {
            throw invalid_argument("Matrix dimensions do not match");
        }
        Matrix result(rows_, cols_);
        for (int i = 0; i < rows_; ++i) {
            for (int j = 0; j < cols_; ++j) {
                result.data_[i][j] = data_[i][j] + other.data_[i][j];
            }
        }
        return result;
    }

    Matrix& operator+=(const Matrix& other)
    {
        if (rows_ != other.rows_ || cols_ != other.cols_) {
            throw invalid_argument("Matrix dimensions do not match");
        }
        for (int i = 0; i < rows_; ++i) {
            for (int j = 0; j < cols_; ++j) {
                data_[i][j] += other.data_[i][j];
            }
        }
        return *this;
    }
};


2. template <class T>
class Template {
public:

    bool BinarySearch(T arr[], int size, T key) {

        for (int i = 0; i < size; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
        int leftBound = 0;
        int rigthBound = size - 1;

        do {
            int middle = (leftBound + rigthBound) / 2;
            if (key == arr[middle]) {
                return true;
            }
            else if (key < arr[middle]) {
                rigthBound = middle - 1;
            }
            else if (key > arr[middle]) {
                leftBound = middle + 1;
            }


        } while (leftBound <= rigthBound);
        return false;
    }

};
template <>
class Template<char> {
public:
    bool BinarySearch(char arr[], int size, char key) {

        for (int i = 0; i < size; i++) {
            cout << "_" << static_cast<int>(arr[i]) << "_" << " ";
        }
        cout << endl;

        int leftBound = 0;
        int rigthBound = size - 1;

        do {
            int middle = (leftBound + rigthBound) / 2;
            if (key == arr[middle]) {
                return true;
            }
            else if (key < arr[middle]) {
                rigthBound = middle - 1;
            }
            else if (key > arr[middle]) {
                leftBound = middle + 1;
            }


        } while (leftBound <= rigthBound);
        return false;
    
    }
};

int main() {

    const int size = 4;
    int arr[size] = { 456,2,22,8 };

    int key{};
    cout << "Input value : ";
    cin >> key;

    const int size_c = 4;
    char arr_c[size_c] = { 1,2,3,4 };

    char key_c{};
    cout << "Input value : ";
    cin >> key_c;
    cout << endl;

    Template<int> temp;
    Template<char> t;

    bool isFound = temp.BinarySearch(arr, size, key);
    auto Found = t.BinarySearch(arr_c, size_c, key_c);

    cout << endl;
    cout << "Result Of your Question : " << isFound << endl;
    cout << "Result Of your Question : " << Found << endl;


    return 0;
}

3.
#include <iostream>
#include <cstring>

using namespace std;

template<typename T>
class Str {
public:

    int find_min_and_count(const T* array, size_t size, T& min_value)
    {
        if (size == 0) {
            return 0;
        }

        min_value = array[0];
        int count = 1;

        for (size_t i = 1; i < size; i++) {
            if (array[i] < min_value) {
                min_value = array[i];
                count = 1;
            }
            else if (array[i] == min_value) {
                count++;
            }
        }

        return count;
    }
};

template<>
class Str<char> {
public:

    int find_min_and_count(const char* arr, size_t size, const char*& min_value) {
        if (size == 0) {
            return 0;
        }

        min_value = &arr[0];
        int count = 1;

        for (size_t i = 1; i < size; i++) {
            if (strcmp(&arr[i], min_value) < 0) {
                min_value = &arr[i];
                count = 1;
            }
            else if (strcmp(&arr[i], min_value) == 0) {
                count++;
            }
        }

        return count;
    }
    void Print(char arr[], size_t size) {
        for (int i = 0; i < size; i++)
        {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

int main() {

    char arr[] = { '1', '2', '3', '4', '\0' };
    const char* min;
    Str<char> str;
    auto res = str.find_min_and_count(arr, strlen(arr), min);
    cout << res << endl;


    return 0;
}
4.
template <class T>
class List {
public:
	List();
	~List();

	void push_back(T data); 
	void pop_front(); 
	void clear(); 

	void push_front(T data);
	void insert(T data, int index); 
	void removeAt(int index); 
	void pop_back(); 

	T& operator[](int index);

	int GetSize() { return Size; }

private:
	template <class T>
	class Node {
	public:
		Node* pNext;
		T data;
		Node(T data = T(), Node* pNext = nullptr) {
			this->data = data;
			this->pNext = pNext;
		}
	};
	int Size;
	Node<T>* head;
};


template<class T>
List<T>::List() {
	Size = 0;
	head = nullptr;
}

template<class T>
List<T>::~List() {
	clear();
}	

template<class T>
void List<T>::push_back(T data) {
	if (head == nullptr) {
		head = new Node<T>(data);
	}
	else {
		Node <T>* current = head;
		while (current->pNext != nullptr) {
			current = current->pNext;
		} 
		current->pNext = new Node<T>(data);
	}
	Size++;
}


template<class T>
void List<T>::pop_front() {
	Node<T> *temp = head;
	head = head->pNext;
	delete temp;
	Size--;
}

template<class T>
void List<T>::clear() {
	while (Size) { 
		pop_front();
	}
}

template<class T>
void List<T>::push_front(T data) {
	head = new Node<T>(data, head);
	Size++;
}


template<class T>
void List<T>::insert(T data, int index) {
	if (index == 0) {
		push_front(data);
	}

	else {

	Node<T>* previous = this->head;
	for (int i = 0; i < index - 1; i++) { 
		previous = previous->pNext;
	}
	Node<T>* newNode = new Node<T>(data, previous->pNext);
		previous->pNext = newNode;
		Size++;
	}

}

template<class T>
void List<T>::removeAt(int index) {

	if (index == 0) {
		pop_front();
	}
	else {

		Node<T>* previous = this->head;
		for (int i = 0; i < index - 1; i++) {
			previous = previous->pNext;
		}

		Node<T>* toDelete = previous->pNext;
		previous->pNext = toDelete->pNext;
		delete toDelete;
		Size--;
	}
}

template<class T>
void List<T>::pop_back() {
	removeAt(Size - 1);

	//або

	Node<T>* previous = this->head;
	while (previous->pNext != nullptr) {
		previous = previous->pNext;
	}

	Node<T>* toDelete = previous->pNext;
	
	delete toDelete;
	
	size--;
}

template<class T>
T& List<T>::operator[](int index) {
	int counter = 0;
	Node <T>* current = this->head;
	while (current != nullptr) {
		if (counter == index) {
			return current->data;
		}
		current = current->pNext;
		counter++;
	}
}