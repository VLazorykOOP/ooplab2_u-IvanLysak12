#include <iostream>
#include <Windows.h>

using namespace std;

class Vector3D
{
	short* v;
	int size;
	int codeError;
public:
	Vector3D();
	Vector3D(int n);
	Vector3D(const Vector3D& a);
	~Vector3D()
	{
		//cout << " del vec";
		if (v) delete[] v;
	}
	void input();
	void input(int n);
	void input(short a);
	void input(int n, short a);
	void print();
	void set_v(int i, short a) { v[1] = a; }
	short get_v(int i) { return v[i]; }

	void operator++();
	void operator++(int);
	void operator--();
	void operator--(int);
	void operator-();
	Vector3D& operator=(const Vector3D& a);

	Vector3D operator+(Vector3D& a);
	Vector3D operator+(int a);
	Vector3D operator+(float a);
	Vector3D operator+(double a);

	Vector3D operator-(Vector3D& a);
	Vector3D operator-(int a);
	Vector3D operator-(float a);
	Vector3D operator-(double a);

	Vector3D operator*(Vector3D& a);
	Vector3D operator*(double a);
	Vector3D operator*(float a);

	Vector3D operator/(int a);
	Vector3D operator/(float a);
	Vector3D operator/(double a);//*

	Vector3D operator%(int a);
};

class Matrix3D
{
	Vector3D* PointArray;
	int n;
	int codeError;
	static int num_matrix;
public:
	Matrix3D() :PointArray(nullptr), n(0), codeError(0) { };
	Matrix3D(int size);
	Matrix3D(int size, short a);
	Matrix3D(int i, int j, short a);
	Matrix3D(int N, short* a);
	Matrix3D(const Matrix3D& a);
	~Matrix3D()
	{
		//cout << " del mat";
		if (PointArray) delete[] PointArray;
	}
	int num_matrix_() { ++num_matrix; return 0; };
	int get_num_matrix() { return num_matrix; }; //метод доступу до статичного поля
	void input();
	void input(short a);
	void print();
	void set_n(int N) { n = N; }
	int get_n() { return n; }
	void set_Error(int cod) { codeError = cod; }
	int get_Error() { return codeError; }

	void operator++();
	void operator++(int);
	void operator--();
	void operator--(int);
	bool operator!();
	void operator-();
	Matrix3D& operator=(const Matrix3D& a);

	Matrix3D operator+(Matrix3D& a);
	Matrix3D operator+(int a);
	Matrix3D operator+(float a);
	Matrix3D operator+(double a);


	Matrix3D operator-(Matrix3D& a);
	Matrix3D operator-(int a);
	Matrix3D operator-(float a);
	Matrix3D operator-(double a);

	Matrix3D operator*(Matrix3D& a);
	Matrix3D operator*(Vector3D& a);
	Matrix3D operator*(double a);
	Matrix3D operator*(float a);

	Matrix3D operator/(int a);
	Matrix3D operator/(float a);

	Matrix3D operator%(int a);

	Matrix3D operator+=(Matrix3D& a);
	Matrix3D operator+=(double a);
	Matrix3D operator+=(float a);

	Matrix3D operator-=(Matrix3D& a);
	Matrix3D operator-=(double a);
	Matrix3D operator-=(float a);

	Matrix3D operator*=(Matrix3D& a);
	Matrix3D operator*=(Vector3D& a);
	Matrix3D operator*=(double a);
	Matrix3D operator*=(float a);

	Matrix3D operator/=(int a);
	Matrix3D operator/=(double a);
	Matrix3D operator/=(float a);

	Matrix3D operator%=(int a);
};
int Matrix3D::num_matrix = 0;

Vector3D::Vector3D()
{
	size = 3;
	v = new short[size];
	for (int i = 0; i < size; i++)v[i] = 0;
}

Vector3D::Vector3D(int n)
{
	if (n <= 0) { v = NULL; size = 0; codeError = -1; cout << " Vec --> 0 "; }
	size = n;
	v = new short[size];
	for (int i = 0; i < n; i++)v[i] = 0;
}

Vector3D::Vector3D(const Vector3D& s) {
	size = s.size;
	v = new short[size];
	codeError = 0;
	for (int i = 0; i < size; i++) v[i] = s.v[i];
}

void Vector3D::input()
{
	if (size == 0)
	{
		cout << "Введіть розмір вектора: "; cin >> size;
		v = new short[size];
	}
	cout << "Заповніть вектор, введіть " << size << " чисел" << endl;
	for (int i = 0; i < size; i++)cin >> v[i];
}

void Vector3D::input(int n)
{
	if (n <= 0) { v = NULL; size = 0; codeError = -1; cout << " Vec --> 0 "; }
	if (v)delete[]v;
	size = n;
	v = new short[size];
	cout << "Заповніть вектор, введіть " << size << " чисел" << endl;
	for (int i = 0; i < size; i++)cin >> v[i];
}

void Vector3D::input(short a)
{
	if (size == 0)
	{
		cout << "Введіть розмір вектора: "; cin >> size;
		v = new short[size];
	}
	for (int i = 0; i < size; i++)v[i] = a;
}

void Vector3D::input(int n, short a)
{
	if (v)delete[]v;
	size = n;
	v = new short[size];
	for (int i = 0; i < size; i++)v[i] = a;
}

void Vector3D::print()
{
	for (int i = 0; i < size; i++)cout << v[i] << " ";
	cout << endl;
}

void Vector3D::operator++()
{
	for (int i = 0; i < size; i++)v[i]++;
}

void Vector3D::operator++(int)
{
	for (int i = 0; i < size; i++)v[i]++;
}

void Vector3D::operator--()
{
	for (int i = 0; i < size; i++)v[i]--;
}

void Vector3D::operator--(int)
{
	for (int i = 0; i < size; i++)v[i]--;
}

void Vector3D::operator-()
{
	for (int i = 0; i < size; i++) v[i] *= -1;
}

Vector3D& Vector3D::operator=(const Vector3D& s) {
	if (size != s.size)
	{
		if (v) delete[] v;
		size = s.size;
		v = new short[size];
		codeError = 0;
	}
	for (int i = 0; i < size; i++) v[i] = s.v[i];
	return *this;
}

Vector3D Vector3D::operator+(Vector3D& a)
{
	int n;
	n = size < a.size ? size : a.size;
	Vector3D tmp(n);
	for (int i = 0; i < n; i++)tmp.v[i] = v[i] + a.v[i];
	return tmp;
}

Vector3D Vector3D::operator+(int a)
{
	Vector3D tmp(size);
	for (int i = 0; i < size; i++)tmp.v[i] = v[i] + a;
	return tmp;
}

Vector3D Vector3D::operator+(float a)
{
	Vector3D tmp(size);
	for (int i = 0; i < size; i++)tmp.v[i] = v[i] + a;
	return tmp;
}

Vector3D Vector3D::operator+(double a)
{
	Vector3D tmp(size);
	for (int i = 0; i < size; i++)tmp.v[i] = v[i] + a;
	return tmp;
}

Vector3D Vector3D::operator-(Vector3D& a)
{
	int n;
	n = size < a.size ? size : a.size;
	Vector3D tmp(n);
	for (int i = 0; i < n; i++)tmp.v[i] = v[i] - a.v[i];
	return tmp;
}

Vector3D Vector3D::operator-(int a)
{
	Vector3D tmp(size);
	for (int i = 0; i < size; i++)tmp.v[i] = v[i] - a;
	return tmp;
}

Vector3D Vector3D::operator-(float a)
{
	Vector3D tmp(size);
	for (int i = 0; i < size; i++)tmp.v[i] = v[i] - a;
	return tmp;
}

Vector3D Vector3D::operator-(double a)
{
	Vector3D tmp(size);
	for (int i = 0; i < size; i++)tmp.v[i] = v[i] - a;
	return tmp;
}

Vector3D Vector3D::operator*(Vector3D& a)
{
	int n;
	n = size < a.size ? size : a.size;
	Vector3D tmp(n);
	for (int i = 0; i < n; i++)tmp.v[i] = v[i] * a.v[i];
	return tmp;
}

Vector3D Vector3D::operator*(double a)
{
	Vector3D tmp(size);
	for (int i = 0; i < size; i++)tmp.v[i] = v[i] * a;
	return tmp;
}

Vector3D Vector3D::operator*(float a)
{
	Vector3D tmp(size);
	for (int i = 0; i < size; i++)tmp.v[i] = v[i] * a;
	return tmp;
}

Vector3D Vector3D::operator/(int a)
{
	Vector3D tmp(size);
	for (int i = 0; i < size; i++)tmp.v[i] = v[i] / a;
	return tmp;
}

Vector3D Vector3D::operator/(float a)
{
	Vector3D tmp(size);
	for (int i = 0; i < size; i++)tmp.v[i] = v[i] / a;
	return tmp;
}

Vector3D Vector3D::operator/(double a)
{
	Vector3D tmp(size);
	for (int i = 0; i < size; i++)tmp.v[i] = v[i] / a;
	return tmp;
}

Vector3D Vector3D::operator%(int a)
{
	Vector3D tmp(size);
	for (int i = 0; i < size; i++)tmp.v[i] = v[i] % a;
	return tmp;
}

//Matrix3F

Matrix3D::Matrix3D(int size)
{
	n = size;
	PointArray = new Vector3D[n];
	for (int i = 0; i < n; i++)PointArray[i].input(short(0));
}

Matrix3D::Matrix3D(int size, short a)
{
	n = size;
	PointArray = new Vector3D[n];
	for (int i = 0; i < n; i++)PointArray[i].input(a);
}

Matrix3D::Matrix3D(int i, int j, short a)
{
	n = i;
	PointArray = new Vector3D[n];
	for (int i = 0; i < n; i++)PointArray[i].input(j, a);
}

Matrix3D::Matrix3D(int N, short* a)
{

	if (N <= 0 || a == NULL) { PointArray = NULL; n = 0; codeError = -1; cout << " Vec --> 0 "; }
	n = N;
	PointArray = new Vector3D[n];
	for (int i = 0; i < n; i++) {
		PointArray[i] = a[i];
	}
}

Matrix3D::Matrix3D(const Matrix3D& a)
{
	n = a.n;
	PointArray = new Vector3D[n];
	codeError = 0;
	for (int i = 0; i < n; i++) PointArray[i] = a.PointArray[i];
}

void Matrix3D::input()
{
	int N;
	if (n == 0)
	{
		cout << "Введіть кількість векторів: "; cin >> n;
		PointArray = new Vector3D[n];
	}
	cout << "Введіть розмір векторів: "; cin >> N;
	for (int i = 0; i < n; i++)PointArray[i].input(N);
}

void Matrix3D::input(short a)
{
	if (n == 0)
	{
		cout << "Введіть кількість векторів: "; cin >> n;
		PointArray = new Vector3D[n];
	}
	for (int i = 0; i < n; i++)PointArray[i].input(a);
}

void Matrix3D::print()
{
	for (int i = 0; i < n; i++)PointArray[i].print();
}

void Matrix3D::operator++()
{
	for (int i = 0; i < n; i++)PointArray[i]++;
}

void Matrix3D::operator++(int)
{
	for (int i = 0; i < n; i++)PointArray[i]++;
}

void Matrix3D::operator--()
{
	for (int i = 0; i < n; i++)PointArray[i]--;
}

void Matrix3D::operator--(int)
{
	for (int i = 0; i < n; i++)PointArray[i]--;
}

bool Matrix3D::operator!()
{
	if (n != 0)return true;
	else return false;
}

void Matrix3D::operator-()
{
	for (int i = 0; i < n; i++) - PointArray[i];
}

Matrix3D& Matrix3D::operator=(const Matrix3D& s) {
	if (n != s.n)
	{
		if (PointArray) delete[] PointArray;
		n = s.n;
		PointArray = new Vector3D[n];
		codeError = 0;
	}
	for (int i = 0; i < n; i++) PointArray[i] = s.PointArray[i];
	return *this;
}

Matrix3D Matrix3D::operator+(Matrix3D& a)
{
	int N;
	N = n < a.n ? n : a.n;
	Matrix3D tmp(N);
	for (int i = 0; i < N; i++)tmp.PointArray[i] = PointArray[i] + a.PointArray[i];
	return tmp;
}

Matrix3D Matrix3D::operator+(int a)
{
	Matrix3D tmp(n);
	for (int i = 0; i < n; i++)tmp.PointArray[i] = PointArray[i] + a;
	return tmp;
}

Matrix3D Matrix3D::operator+(float a)
{
	Matrix3D tmp(n);
	for (int i = 0; i < n; i++)tmp.PointArray[i] = PointArray[i] + a;
	return tmp;
}

Matrix3D Matrix3D::operator+(double a)
{
	Matrix3D tmp(n);
	for (int i = 0; i < n; i++)tmp.PointArray[i] = PointArray[i] + a;
	return tmp;
}

Matrix3D Matrix3D::operator-(Matrix3D& a)
{
	int N;
	N = n < a.n ? n : a.n;
	Matrix3D tmp(N);
	for (int i = 0; i < N; i++)tmp.PointArray[i] = PointArray[i] - a.PointArray[i];
	return tmp;
}

Matrix3D Matrix3D::operator-(int a)
{
	Matrix3D tmp(n);
	for (int i = 0; i < n; i++)tmp.PointArray[i] = PointArray[i] - a;
	return tmp;
}

Matrix3D Matrix3D::operator-(float a)
{
	Matrix3D tmp(n);
	for (int i = 0; i < n; i++)tmp.PointArray[i] = PointArray[i] - a;
	return tmp;
}

Matrix3D Matrix3D::operator-(double a)
{
	Matrix3D tmp(n);
	for (int i = 0; i < n; i++)tmp.PointArray[i] = PointArray[i] - a;
	return tmp;
}

Matrix3D Matrix3D::operator*(Matrix3D& a)
{
	int N;
	N = n < a.n ? n : a.n;
	Matrix3D tmp(N);
	for (int i = 0; i < N; i++)tmp.PointArray[i] = PointArray[i] * a.PointArray[i];
	return tmp;
}

Matrix3D Matrix3D::operator*(Vector3D& a)
{
	Matrix3D tmp(n);
	for (int i = 0; i < n; i++)tmp.PointArray[i] = PointArray[i] * a;
	return tmp;
}

Matrix3D Matrix3D::operator*(double a)
{
	Matrix3D tmp(n);
	for (int i = 0; i < n; i++)tmp.PointArray[i] = PointArray[i] * a;
	return tmp;
}

Matrix3D Matrix3D::operator*(float a)
{
	Matrix3D tmp(n);
	for (int i = 0; i < n; i++)tmp.PointArray[i] = PointArray[i] * a;
	return tmp;
}

Matrix3D Matrix3D::operator/(int a)
{
	Matrix3D tmp(n);
	for (int i = 0; i < n; i++)tmp.PointArray[i] = PointArray[i] / a;
	return tmp;
}

Matrix3D Matrix3D::operator/(float a)
{
	Matrix3D tmp(n);
	for (int i = 0; i < n; i++)tmp.PointArray[i] = PointArray[i] / a;
	return tmp;
}

Matrix3D Matrix3D::operator%(int a)
{
	Matrix3D tmp(n);
	for (int i = 0; i < n; i++)tmp.PointArray[i] = PointArray[i] % a;
	return tmp;
}
//
Matrix3D Matrix3D::operator+=(Matrix3D& a)
{
	int N;
	N = n < a.n ? n : a.n;
	for (int i = 0; i < N; i++)PointArray[i] = PointArray[i] + a.PointArray[i];
	return *this;
}

Matrix3D Matrix3D::operator+=(double a)
{
	for (int i = 0; i < n; i++)PointArray[i] = PointArray[i] + a;
	return *this;
}

Matrix3D Matrix3D::operator+=(float a)
{
	for (int i = 0; i < n; i++)PointArray[i] = PointArray[i] + a;
	return *this;
}

Matrix3D Matrix3D::operator-=(Matrix3D& a)
{
	int N;
	N = n < a.n ? n : a.n;
	for (int i = 0; i < N; i++)PointArray[i] = PointArray[i] - a.PointArray[i];
	return *this;
}

Matrix3D Matrix3D::operator-=(double a)
{
	;
	for (int i = 0; i < n; i++)PointArray[i] = PointArray[i] - a;
	return *this;
}

Matrix3D Matrix3D::operator-=(float a)
{
	for (int i = 0; i < n; i++)PointArray[i] = PointArray[i] - a;
	return *this;
}

Matrix3D Matrix3D::operator*=(Matrix3D& a)
{
	int N;
	N = n < a.n ? n : a.n;
	for (int i = 0; i < N; i++)PointArray[i] = PointArray[i] * a.PointArray[i];
	return *this;
}

Matrix3D Matrix3D::operator*=(Vector3D& a)
{
	for (int i = 0; i < n; i++)PointArray[i] = PointArray[i] * a;
	return *this;
}

Matrix3D Matrix3D::operator*=(double a)
{
	for (int i = 0; i < n; i++)PointArray[i] = PointArray[i] * a;
	return *this;
}

Matrix3D Matrix3D::operator*=(float a)
{
	;
	for (int i = 0; i < n; i++)PointArray[i] = PointArray[i] * a;
	return *this;
}

Matrix3D Matrix3D::operator/=(int a)
{
	for (int i = 0; i < n; i++)PointArray[i] = PointArray[i] / a;
	return *this;
}

Matrix3D Matrix3D::operator/=(double a)
{
	for (int i = 0; i < n; i++)PointArray[i] = PointArray[i] / a;
	return *this;
}

Matrix3D Matrix3D::operator/=(float a)
{
	for (int i = 0; i < n; i++)PointArray[i] = PointArray[i] / a;
	return *this;
}

Matrix3D Matrix3D::operator%=(int a)
{
	for (int i = 0; i < n; i++)PointArray[i] = PointArray[i] % a;
	return *this;
}

void main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	Matrix3D mat1, mat2(4);
	mat1.num_matrix_(); mat2.num_matrix_();
	short a;
	cout << "\nmat1" << endl;
	mat1.print();

	cout << "\nmat2(4)" << endl;
	mat2.print();

	cout << "Введіть ціле число а: "; cin >> a;
	Matrix3D mat3(2, a), mat4(3, 2, a);
	mat3.num_matrix_(); mat4.num_matrix_();

	cout << "\nmat3(2, a)" << endl;
	mat3.print();

	cout << "\nmat4(3, 2, a)" << endl;
	mat4.print();

	cout << "\nmat1" << endl;
	mat1.input();
	cout << "\nmat1" << endl;
	mat1.print();

	Matrix3D mat5(mat1);
	mat5.num_matrix_();
	cout << "\nmat5(mat1)" << endl;
	mat5.print();

	cout << "\nmat1++" << endl;
	mat1++;
	mat1.print();
	cout << "\n++mat1" << endl;
	++mat1;
	mat1.print();

	cout << "\nmat1--" << endl;
	mat1--;
	mat1.print();
	cout << "\n--mat1" << endl;
	--mat1;
	mat1.print();

	if (!mat1)cout << "\nКількість елементів mat1 не дорівнює 0" << endl;
	else cout << "\nКількість елементів mat1 дорівнює 0" << endl;

	cout << "\n-mat1" << endl;
	-mat1;
	mat1.print();

	cout << "\nmat2 = mat1" << endl;
	cout << "mat2" << endl;
	mat2 = mat1;
	mat2.print();

	cout << "\nmat4 = mat1 + mat3 = " << endl;
	mat4 = mat1 + mat3;
	mat4.print();

	int b;
	cout << "\nВведіть ціле число b: "; cin >> b;
	cout << "\nmat4 + " << b << " = " << endl;
	mat4 = mat4 + b;
	mat4.print();

	float c;
	cout << "\nВведіть дробове число с: "; cin >> c;
	cout << "\nmat4 + " << c << " = " << endl;
	mat4 = mat4 + c;
	mat4.print();

	double d;
	cout << "\nВведіть дробове число d: "; cin >> d;
	cout << "\nmat4 + " << d << " = " << endl;
	mat4 = mat4 + d;
	mat4.print();
	//
	cout << "\nmat4 = mat4 - mat3 = " << endl;
	mat4 = mat4 - mat3;
	mat4.print();

	cout << "\nmat4 - " << b << " = " << endl;
	mat4 = mat4 - b;
	mat4.print();

	cout << "\nmat4 - " << c << " = " << endl;
	mat4 = mat4 - c;
	mat4.print();

	cout << "\nmat4 - " << d << " = " << endl;
	mat4 = mat4 - d;
	mat4.print();
	//
	cout << "\nmat4 = mat4 * mat3 = " << endl;
	mat4 = mat4 * mat3;
	mat4.print();
	Vector3D vec1;
	cout << "vec1" << endl;
	vec1.input();
	cout << "\nmat4 * vec1 = " << endl;
	mat4 = mat4 * vec1;
	mat4.print();

	cout << "\nmat4 * " << d << " = " << endl;
	mat4 = mat4 * d;
	mat4.print();

	cout << "\nmat4 * " << c << " = " << endl;
	mat4 = mat4 * c;
	mat4.print();
	//
	cout << "\nmat4 / " << b << " = " << endl;
	mat4 = mat4 / b;
	mat4.print();

	cout << "\nmat4 / " << c << " = " << endl;
	mat4 = mat4 / c;
	mat4.print();
	//
	cout << "\nmat4 % " << b << " = " << endl;
	mat4 = mat4 % b;
	mat4.print();
	//
	//
	cout << "\nmat4 += mat1" << endl;
	mat4 += mat1;
	mat4.print();

	cout << "\nmat4 += " << d << endl;
	mat4 += d;
	mat4.print();

	cout << "\nmat4 += " << c << endl;
	mat4 += c;
	mat4.print();
	//
	cout << "\nmat4 -= mat3" << endl;
	mat4 -= mat3;
	mat4.print();

	cout << "\nmat4 -= " << d << endl;
	mat4 -= d;
	mat4.print();

	cout << "\nmat4 -= " << c << endl;
	mat4 -= c;
	mat4.print();

	//
	cout << "\nmat4 *= mat3" << endl;
	mat4 *= mat3;
	mat4.print();

	cout << "\nmat4 *= vec1" << endl;
	mat4 *= vec1;
	mat4.print();

	cout << "\nmat4 *= " << d << endl;
	mat4 *= d;
	mat4.print();

	cout << "\nmat4 *= " << c << endl;
	mat4 *= c;
	mat4.print();
	//
	cout << "\nmat4 /= " << b << endl;
	mat4 /= b;
	mat4.print();

	cout << "\nmat4 /= " << d << endl;
	mat4 /= d;
	mat4.print();

	cout << "\nmat4 /= " << c << endl;
	mat4 /= c;
	mat4.print();
	//
	cout << "\nmat4 %= " << b << endl;
	mat4 %= b;
	mat4.print();
	cout << "\nКількість матриць: " << mat5.get_num_matrix() << endl;
}