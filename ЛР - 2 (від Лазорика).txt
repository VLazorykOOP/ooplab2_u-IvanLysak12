1.
int a, b, d, c, result_x, result_y;

		cout << " a = ";
		cin >> a;
		cout << " b = ";
		cin >> b;
		cout << " c = ";
		cin >> c;
		cout << " d = ";
		cin >> d;

		result_x = ((((a << 5) + a + (a << 2))
			+ ((((a << 4) - (a << 2) - a) 
			+ ((c << 4) - (c << 2))) >> 6))
			- ((b << 11) + (b << 9))
			+ ((d << 7) - d));
		result_y = 34 * a + ((13 * a + 12 * c) / 64) - 2560 * b + 127 * d;

		cout << "\t" << " X = " << result_x << endl;
		cout << "\t" << " Y = " << result_y << endl;

------------------------------------------------------------------------------------------------
2.
void encryption(string* name, unsigned short Res[64])
{
    //зчитування інформації з файлу
    char l[4][17];
    ifstream fin;
    fin.open(*name);
    for (int i = 0; i < 4; i++)
    {
        fin.getline(l[i], 17);
        l[i][17] = '\0';
    }
    fin.close();
    for (int i = 0; i < 4; i++)//заповнення пробілами вільні місця в рядках
    {
        if (strlen(l[i]) != 16)
        {
            for (int j = strlen(l[i]); j < 16; j++)
            {
                l[i][j] = ' ';
                if (j + 1 == 16)l[i][j + 1] = '\0';
            }
        }
    }
    //шиврування
    unsigned short  res = 0, changeable;
    unsigned char nline, codletter, posline, t = 1;
    int b = 0;



    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 16; j++)
        {
            //номер рядка букви 2 біти
            res = 0;
            nline = i;
            res |= nline;

            //позиція символу в рядку 4 біти
            posline = j;
            changeable = posline;
            res |= changeable << 2;
            b = 0; t = 1;

            // код букви 8 біт
            codletter = l[i][j];
            changeable = codletter;
            res |= changeable << 6;

            //біт парності перших двох полів 1 біт
            for (int k = 0; k < 8; k++) // обчислення біта парності
            {
                if (nline & t == t || codletter & t == t)
                {
                    b++;
                }
                t <<= 1;
            }
            if (b % 2 == 0)res |= 1 << 14;



            //біт парності символу
            for (int k = 0; k < 8; k++) // обчислення біта парності
            {
                if ((codletter & t) == t)b++;
                t <<= 1;
            }

            if (b % 2 == 0)res |= 1 << 15;
            if (res & 0x4000) res |= 0x8000;
            Res[16 * i + j] = res;
            b = 0; t = 1;


        }
    }
    //запис результату в файл
    string name2;
    cout << "Input name of file where be write shif-text: "; cin >> name2;
    ofstream fout(name2, ios::binary | ios::out);
    fout.write((char*)Res, 64 * sizeof(unsigned short));
    fout.close();
}

void main()
{
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    unsigned short Res[64];
    int v, V;
    string name;
    cout << "Shifr - 0" << endl << "Rozshifr - 1" << endl;
    cout << "Input Step: "; cin >> V;
    cout << "Open file - 1" << endl << "Create file - 2" << endl; cin >> v;
    if (V == 0)
    {
        if (v == 1)
        {
            //відкриття файлу
            cout << "Name of File: "; cin >> name;
            encryption(&name, Res);
            //for (int i = 0; i < 64; i++)cout << bitset<sizeof(unsigned short) * 8>(Res[i]) << endl;
        }
        else if (v == 2)
        {
            //створення файлу
            char line[17];
            cout << "Name of File: "; cin >> name;
            ofstream fout;
            fout.open(name);
            cout << "Input 8 rows and max по 8 sumbols " << endl;
            gets_s(line);
            for (int i = 0; i < 16; i++)
            {
                gets_s(line);
                fout << line << endl;
            }
            fout.close();
            encryption(&name, Res);
            //for (int i = 0; i < 64; i++)cout << bitset<sizeof(unsigned short) * 8>(Res[i]) << endl;
        }
    }
    else if (V == 1)
    {
        char res[4][17], letter;
        unsigned short l[64], codsymbol, code;
        unsigned short masksymbol, masknline = 3, maskposline;
        short nline, posline;
        string name;
        cout << "Rozshifr : "; cin >> name;
        ifstream fin(name, ios::binary | ios::in);
        fin.read((char*)l, 64 * sizeof(unsigned short));
        fin.close();
        maskposline = 15 << 2; //маска для виключення всіх бітів крім тих які відповідають за позицію символа в рядку
        masksymbol = 255 << 6; //маска для виключення всіх бітів крім тих які відповідають символ
        for (int i = 0; i < 64; i++)
        {
            code = l[i];
            codsymbol = (code & masksymbol) >> 6;
            letter = codsymbol;
            nline = code & masknline;
            posline = (code & maskposline) >> 2;
            res[nline][posline] = letter;
        }

        cout << " Name of File : "; cin >> name;
        ofstream fout;
        fout.open(name);
        cout << "======Result======" << endl;
        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 16; j++)
            {
                fout << res[i][j];
                cout << res[i][j];
            }
            fout << endl;
            cout << endl;
        }
        fout.close();
    }
}
------------------------------------------------------------------------------------------------
3.
union bitField
{
    int nline, posline;
    unsigned short codletter;
};

void encryption(string* name, unsigned short Res[64])
{
    //зчитування інформації з файлу
    char l[4][17];
    ifstream fin;
    fin.open(*name);
    for (int i = 0; i < 4; i++)
    {
        fin.getline(l[i], 17);
        l[i][17] = '\0';
    }
    fin.close();
    for (int i = 0; i < 4; i++)//заповнення пробілами вільні місця в рядках
    {
        if (strlen(l[i]) != 16)
        {
            for (int j = strlen(l[i]); j < 16; j++)
            {
                l[i][j] = ' ';
                if (j + 1 == 16)l[i][j + 1] = '\0';
            }
        }
    }
    //шиврування
    bitField code;
    unsigned short  res = 0;
    unsigned char t = 1;
    int b = 0;



    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 16; j++)
        {
            //номер рядка букви 2 біти
            res = 0;
            code.nline = i;
            res |= code.nline;

            //позиція символу в рядку 4 біти
            code.posline = j;
            res |= code.posline << 2;
            b = 0; t = 1;

            // код букви 8 біт
            code.codletter = l[i][j];
            res |= code.codletter << 6;

            //біт парності перших двох полів 1 біт
            code.nline = i;
            for (int k = 0; k < 8; k++) // обчислення біта парності
            {
                if ((code.nline & t) == t)
                {
                    b++;
                }
                t <<= 1;
            }
            code.codletter = l[i][j];
            for (int k = 0; k < 8; k++) // обчислення біта парності
            {
                if ((code.codletter & t) == t)
                {
                    b++;
                }
                t <<= 1;
            }
            if (b % 2 == 0)res |= 1 << 14;



            //біт парності символу
            for (int k = 0; k < 8; k++) // обчислення біта парності
            {
                if ((code.codletter & t) == t)b++;
                t <<= 1;
            }

            if (b % 2 == 0)res |= 1 << 15;
            if (res & 0x4000) res |= 0x8000;
            Res[16 * i + j] = res;
            b = 0; t = 1;


        }
    }
    //запис результату в файл
    string name2;
    cout << "Enter the name of the file in which the encrypted text will be written: "; cin >> name2;
    ofstream fout(name2, ios::binary | ios::out);
    fout.write((char*)Res, 64 * sizeof(unsigned short));
    fout.close();
}

void main()
{
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    unsigned short Res[64];
    int v, V;
    string name;
    cout << "Shifr - 0" << endl << "RozShifr - 1" << endl;
    cout << "Select  action: "; cin >> V;
    cout << "open file - 1" << endl << "create file - 2" << endl; cin >> v;
    if (V == 0)
    {
        if (v == 1)
        {
            //відкриття файлу
            cout << "Name of file: "; cin >> name;
            encryption(&name, Res);
            //for (int i = 0; i < 64; i++)cout << bitset<sizeof(unsigned short) * 8>(Res[i]) << endl;
        }
        else if (v == 2)
        {
            //створення файлу
            char line[17];
            cout << "Name of file: "; cin >> name;
            ofstream fout;
            fout.open(name);
            cout << "Fill the file with 8 lines of maximum 8 characters" << endl;
            gets_s(line);
            for (int i = 0; i < 16; i++)
            {
                gets_s(line);
                fout << line << endl;
            }
            fout.close();
            encryption(&name, Res);
            //for (int i = 0; i < 64; i++)cout << bitset<sizeof(unsigned short) * 8>(Res[i]) << endl;
        }
    }
    else if (V == 1)
    {
        char res[4][17], letter;
        unsigned short l[64], codsymbol, code;
        unsigned short masksymbol, masknline = 3, maskposline;
        short nline, posline;
        string name;
        cout << "Enter name of file to be RozShifr: "; cin >> name;
        ifstream fin(name, ios::binary | ios::in);
        fin.read((char*)l, 64 * sizeof(unsigned short));
        fin.close();
        maskposline = 15 << 2; //маска для виключення всіх бітів крім тих які відповідають за позицію символа в рядку
        masksymbol = 255 << 6; //маска для виключення всіх бітів крім тих які відповідають символ
        for (int i = 0; i < 64; i++)
        {
            code = l[i];
            codsymbol = (code & masksymbol) >> 6;
            letter = codsymbol;
            nline = code & masknline;
            posline = (code & maskposline) >> 2;
            res[nline][posline] = letter;
        }

        cout << "Enter name of file in which the result will be written : "; cin >> name;
        ofstream fout;
        fout.open(name);
        cout << "======Result======" << endl;
        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 16; j++)
            {
                fout << res[i][j];
                cout << res[i][j];
            }
            fout << endl;
            cout << endl;
        }
        fout.close();
    }
}
------------------------------------------------------------------------------------------------
4.
int b;
	cout << "B = ";
	cin >> b;
	int a = 2;

	int c = 0;


	if (b == 4) {
		c = a << 2;
		cout << c << endl;
	}

	else if (b == 8) {
		c = a << 3;
		cout << c << endl;
	}

	else if (b == 16) {
		c = a << 4;
		cout << c << endl;
	}
	else if (b == 32) {
		c = a << 5;
		cout << c << endl;
	}

	else if (b == 64) {
		c = a << 6;
		cout << c << endl;
	}


    else if (b == 128) {
        c = a << 7;
        cout << c << endl;
    }
    else if (b == 256) {
        c = a << 8;
        cout << c << endl;
    }
    else if (b == 512) {
        c = a << 9;
        cout << c << endl;
    }
    else if (b == 1024) {
        c = a << 10;
        cout << c << endl;
    }
    else if (b == 2048) {
        c = a << 11;
        cout << c << endl;
    }
    else if (b == 4096) {
        c = a << 12;
        cout << c << endl;
    }


    else if (b == 8192) {
        c = a << 13;
        cout << c << endl;
    }
    else if (b == 16384) {
        c = a << 14;
        cout << c << endl;
    }
    else if (b == 32768) {
        c = a << 15;
        cout << c << endl;
    }